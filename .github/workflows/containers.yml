name: Containers
on:
  # This Workflow can be triggered manually
  workflow_dispatch:
  # Build container images on a daily schedule
  schedule:
    - cron: '11 5 * * *'
  pull_request:
    branches:
      - main
  # Let's also build & tag Spack containers on releases.
  release:
    types: [published]

jobs:
  deploy-images:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      # Even if one container fails to build we still want the others
      # to continue their builds.
      fail-fast: false
      # A matrix of Dockerfile paths, associated tags, and which architectures
      # they support.
      matrix:
        dockerfile: [[e4s-ubuntu-18.04, e4s-ubuntu-18.04.dockerfile, 'linux/amd64,linux/ppc64le,linux/arm64'],
                     [e4s-ubuntu-20.04, e4s-ubuntu-20.04.dockerfile, 'linux/amd64,linux/ppc64le,linux/arm64']]
    name: Build ${{ matrix.dockerfile[0] }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Container Tag Normal (Nightly)
        run: |
          container="${{ matrix.dockerfile[0] }}:latest"
          echo "container=${container}" >> $GITHUB_ENV
          echo "versioned=${container}" >> $GITHUB_ENV

        # On a new release create a container with the same tag as the release.
      - name: Set Container Tag on Release
        if: github.event_name == 'release'
        run: |
          versioned="${{matrix.dockerfile[0]}}:${GITHUB_REF##*/}"
          echo "versioned=${versioned}" >> $GITHUB_ENV

      - name: Check ${{ matrix.dockerfile[1] }} Exists
        run: |
          printf "Preparing to build ${{ env.container }} from ${{ matrix.dockerfile[1] }}"
          if [ ! -f "Dockerfiles/${{ matrix.dockerfile[1]}}" ]; then
              printf "Dockerfile ${{ matrix.dockerfile[0]}} does not exist"
              exit 1;
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Deploy ${{ matrix.dockerfile[1] }}
        uses: docker/build-push-action@v2
        with:
          file: Dockerfiles/${{matrix.dockerfile[1]}}
          platforms: ${{ matrix.dockerfile[2] }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/spack/${{ env.container }}
            ghcr.io/spack/${{ env.versioned }}
